# Serverless Framework Configuration
# Deploys AWS Lambda, API Gateway, DynamoDB, and Cognito resources

service: serverless-web-app-demo

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  
  # IAM Role permissions for Lambda functions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tableName}"
        - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tableName}/index/*"
    
    - Effect: Allow
      Action:
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminListGroupsForUser
      Resource: "*"
    
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

  # Environment variables
  environment:
    DYNAMODB_TABLE: ${self:custom.tableName}
    COGNITO_USER_POOL_ID: ${self:custom.userPoolId}
    STAGE: ${self:provider.stage}

# Custom variables
custom:
  tableName: ${self:service}-${self:provider.stage}-items
  userPoolName: ${self:service}-${self:provider.stage}-user-pool
  userPoolId: !Ref CognitoUserPool

# Lambda Functions
functions:
  api:
    handler: backend/lambda/index.handler
    name: ${self:service}-${self:provider.stage}-api
    description: Main API handler for serverless web application
    timeout: 30
    memorySize: 256
    
    # API Gateway Events
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false
      
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

# AWS Resources
resources:
  Resources:
    # DynamoDB Table
    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    # Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
        UsernameConfiguration:
          CaseSensitive: false
        Tags:
          Environment: ${self:provider.stage}
          Service: ${self:service}

    # Cognito User Pool Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: days
        AccessTokenValidity: 24
        IdTokenValidity: 24
        RefreshTokenValidity: 30

    # S3 Bucket for static website hosting
    StaticWebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-frontend
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    # S3 Bucket Policy
    StaticWebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StaticWebsiteBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: !Sub "${StaticWebsiteBucket}/*"

    # CloudFront Distribution (optional)
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt StaticWebsiteBucket.RegionalDomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: ""
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
          PriceClass: PriceClass_100
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

  # Stack Outputs
  Outputs:
    ApiGatewayUrl:
      Description: API Gateway endpoint URL
      Value: !Sub "https://${RestApiApigEvent}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url

    UserPoolId:
      Description: Cognito User Pool ID
      Value: !Ref CognitoUserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-user-pool-id

    UserPoolClientId:
      Description: Cognito User Pool Client ID
      Value: !Ref CognitoUserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-user-pool-client-id

    DynamoDBTableName:
      Description: DynamoDB Table Name
      Value: !Ref ItemsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-dynamodb-table

    S3BucketName:
      Description: S3 Bucket for static website
      Value: !Ref StaticWebsiteBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-s3-bucket

    WebsiteURL:
      Description: Static website URL
      Value: !GetAtt StaticWebsiteBucket.WebsiteURL
      Export:
        Name: ${self:service}-${self:provider.stage}-website-url

    CloudFrontURL:
      Description: CloudFront distribution URL
      Value: !GetAtt CloudFrontDistribution.DomainName
      Export:
        Name: ${self:service}-${self:provider.stage}-cloudfront-url

# Plugins
plugins:
  - serverless-offline
  - serverless-dotenv-plugin

# Package configuration
package:
  patterns:
    - '!node_modules/**'
    - '!.serverless/**'
    - '!.git/**'
    - '!README.md'
    - '!docs/**'
    - 'backend/lambda/**'
